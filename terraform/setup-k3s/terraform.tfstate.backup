{
  "version": 4,
  "terraform_version": "1.0.6",
  "serial": 189,
  "lineage": "d5a1cb64-7acb-02db-6d58-d7a5eb416856",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "digitalocean_droplet",
      "name": "agents",
      "provider": "provider[\"registry.terraform.io/digitalocean/digitalocean\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "backups": false,
            "created_at": "2021-09-18T18:35:39Z",
            "disk": 160,
            "droplet_agent": null,
            "id": "265442680",
            "image": "ubuntu-18-04-x64",
            "ipv4_address": "206.189.92.71",
            "ipv4_address_private": "10.10.0.3",
            "ipv6": false,
            "ipv6_address": "",
            "locked": false,
            "memory": 8192,
            "monitoring": false,
            "name": "agent-0",
            "price_hourly": 0.05952,
            "price_monthly": 40,
            "private_networking": true,
            "region": "sgp1",
            "resize_disk": true,
            "size": "s-4vcpu-8gb",
            "ssh_keys": [
              "31320611"
            ],
            "status": "active",
            "tags": [],
            "urn": "do:droplet:265442680",
            "user_data": "0faa25cbf229d11b3668e633a4f5ffc968072111",
            "vcpus": 4,
            "volume_ids": [],
            "vpc_uuid": "35e71af1-3a9e-4f97-bff2-61190c8f4e61"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "digitalocean_ssh_key.default",
            "digitalocean_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "digitalocean_droplet",
      "name": "servers",
      "provider": "provider[\"registry.terraform.io/digitalocean/digitalocean\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "backups": false,
            "created_at": "2021-09-18T18:35:39Z",
            "disk": 160,
            "droplet_agent": null,
            "id": "265442681",
            "image": "ubuntu-18-04-x64",
            "ipv4_address": "167.99.65.252",
            "ipv4_address_private": "10.10.0.2",
            "ipv6": false,
            "ipv6_address": "",
            "locked": false,
            "memory": 8192,
            "monitoring": false,
            "name": "server-0",
            "price_hourly": 0.05952,
            "price_monthly": 40,
            "private_networking": true,
            "region": "sgp1",
            "resize_disk": true,
            "size": "s-4vcpu-8gb",
            "ssh_keys": [
              "31320611"
            ],
            "status": "active",
            "tags": [],
            "urn": "do:droplet:265442681",
            "user_data": "0faa25cbf229d11b3668e633a4f5ffc968072111",
            "vcpus": 4,
            "volume_ids": [],
            "vpc_uuid": "35e71af1-3a9e-4f97-bff2-61190c8f4e61"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "digitalocean_ssh_key.default",
            "digitalocean_vpc.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "digitalocean_ssh_key",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/digitalocean/digitalocean\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "fingerprint": "71:8c:21:55:70:77:d7:33:70:22:88:66:02:ba:89:fa",
            "id": "31320611",
            "name": "K3S Cluster SSH Key",
            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXZ9XRqUY/d+LPDMm4rYvCV5FzQRuyB1MUy+yeZpP5y7PVKrt5ctUTWMl9C1tmJZM7hs6LKdGlNQa2OSQN056r3piRppDiABWduo0qixWEdPkptl42MMiIRD+2tRTuBbBK/Z++FUrNYPXYjNQZpAh0DChgkb3SKFqylBU6r1612XhJ1b3fOQqqe9bG7LO8Rb4hBqch6UgD3h3M3Ofp9qGqubxEfxKUYb09EZ11KpZudNrwQAmRUMeX11PWM95pdT2qLl2N9/YtHKue5lnw264EGftL5MNqyfeeuNA9O6eLE6Yt7YJM3oRmvnMfX56+dtQ+BVMXrnqrrfqUYQkz+cHxgZZne++QC97mPj/3mdyvqLqeDBvYlBIhWnt6x52jc2dStYmBvfLSQXJFhc1nlOt/iCeSvYWSzwtPR4TKiYhQbQTy5vmi2ehdO+0KnNdjON0BESPrKekH/YC6W/uP1LsY1NXbolAFJcBUTO5iPTPxedbH0+0rgOR3bp0etC7w3pc= kirin@devbox\n"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "digitalocean_vpc",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/digitalocean/digitalocean\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "created_at": "2021-09-18 18:35:37 +0000 UTC",
            "default": false,
            "description": "",
            "id": "35e71af1-3a9e-4f97-bff2-61190c8f4e61",
            "ip_range": "10.10.0.0/16",
            "name": "k3s-cluster-vpc",
            "region": "sgp1",
            "timeouts": null,
            "urn": "do:vpc:35e71af1-3a9e-4f97-bff2-61190c8f4e61"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxMjAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_installer",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "#!/bin/sh\nset -e\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN or K3S_CLUSTER_SECRET is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nSTORAGE_URL=https://storage.googleapis.com/k3s-ci-builds\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -d /run/systemd ]; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ] \u0026\u0026 [ -z \"${K3S_CLUSTER_SECRET}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN, K3S_TOKEN_FILE or K3S_CLUSTER_SECRET is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEMD_TYPE=notify\n        else\n            SYSTEMD_TYPE=exec\n        fi\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ]; then\n        return 1\n    fi\n}\n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n    else\n        HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n    fi\n    info \"Downloading hash ${HASH_URL}\"\n    download ${TMP_HASH} ${HASH_URL}\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    policy_hint=\"please install:\n    yum install -y container-selinux selinux-policy-base\n    yum install -y https://${rpm_site}/k3s/${rpm_channel}/common/centos/7/noarch/k3s-selinux-0.2-1.el7_8.noarch.rpm\n\"\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || grep -q 'ID=flatcar' /etc/os-release; then\n        policy_error=warn\n    fi\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download; then\n        info \"Skipping installation of SELinux RPM\"\n    else\n        install_selinux_rpm ${rpm_site} ${rpm_channel}\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    else\n        if [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\n# --- if on an el7/el8 system, install k3s-selinux\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ]; then\n        dist_version=\"$(. /etc/os-release \u0026\u0026 echo \"$VERSION_ID\")\"\n        maj_ver=$(echo \"$dist_version\" | sed -E -e \"s/^([0-9]+)\\.?[0-9]*$/\\1/\")\n        if [ -r /etc/redhat-release ]; then\n            case ${maj_ver} in\n                7)\n                    $SUDO yum -y install yum-utils\n                    $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n                    ;;\n                8)\n                    :\n                    ;;\n                *)\n                    return\n                    ;;\n            esac\n        fi\n        $SUDO rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\n        $SUDO tee /etc/yum.repos.d/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/centos/${maj_ver}/noarch\nenabled=1\ngpgcheck=1\ngpgkey=https://${1}/public.key\nEOF\n        $SUDO yum -y install \"k3s-selinux\"\n    fi\n    return\n}\n\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nfor bin in /var/lib/rancher/k3s/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w 'k3s/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    awk -v path=\"$1\" '$2 ~ (\"^\" path) { print $2 }' /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount \"$0\" \u0026\u0026 rm -rf \"$0\"'\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/rancher/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\n# Delete network interface(s) that match 'master cni0'\nip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n    iface=${iface%%@*}\n    [ -z \"$iface\" ] || ip link delete $iface\ndone\nip link delete cni0\nip link delete flannel.1\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | iptables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nrm -rf /var/lib/rancher/k3s\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    UMASK=$(umask)\n    umask 0377\n    env | grep '^K3S_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    env | egrep -i '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n    umask $UMASK\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then source /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then source ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n",
            "id": "2021-09-18 18:40:17.017047357 +0000 UTC",
            "request_headers": null,
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Access-Control-Allow-Origin": "*",
              "Cache-Control": "max-age=300",
              "Content-Security-Policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",
              "Content-Type": "text/plain; charset=utf-8",
              "Date": "Sat, 18 Sep 2021 18:40:17 GMT",
              "Etag": "W/\"208f152d931853b0f49a813fc4cd9278aef977eb5100e8a4f85c048130d1d1ec\"",
              "Expires": "Sat, 18 Sep 2021 18:45:17 GMT",
              "Source-Age": "0",
              "Strict-Transport-Security": "max-age=31536000",
              "Vary": "Authorization,Accept-Encoding,Origin",
              "Via": "1.1 varnish",
              "X-Cache": "HIT",
              "X-Cache-Hits": "1",
              "X-Content-Type-Options": "nosniff",
              "X-Fastly-Request-Id": "c0cbe00cdcb56a8a51226aa4f12fe25fa23147a8",
              "X-Frame-Options": "deny",
              "X-Github-Request-Id": "5C78:2293:146906:1D34E1:61461D9C",
              "X-Served-By": "cache-qpg1244-QPG",
              "X-Timer": "S1631990417.710763,VS0,VE306",
              "X-Xss-Protection": "1; mode=block"
            },
            "url": "https://raw.githubusercontent.com/rancher/k3s/v1.21.4+k3s1/install.sh"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_version",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channels\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.21.4+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.21.4+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.22.2-rc1+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latest\":\"v1.16.14-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latest\":\"v1.17.17-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.20-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.14+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.10+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.4+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "id": "2021-09-18 18:40:16.693184529 +0000 UTC",
            "request_headers": null,
            "response_headers": {
              "Content-Type": "application/json",
              "Date": "Sat, 18 Sep 2021 18:40:16 GMT",
              "Expires": "Wed 24 Feb 1982 18:42:00 GMT",
              "Server": "openresty/1.15.8.1",
              "Strict-Transport-Security": "max-age=15724800; includeSubDomains",
              "Vary": "Accept-Encoding",
              "X-Api-Schemas": "https://update.k3s.io/v1-release/schemas"
            },
            "url": "https://update.k3s.io/v1-release/channels"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "agents_annotation",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "agents_drain",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "agents_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "agents_label",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "agents_taint",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "k8s_ca_certificates_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "4888651358921392864",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "6529317376087534507",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "5075254110173423423",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "id": "6975890609643818311",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "id": "7931023336384339015",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "id": "7672695900661626618",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubernetes_ready",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_annotation",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_drain",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "server-0",
          "status": "tainted",
          "schema_version": 0,
          "attributes": {
            "id": "8402906788908217879",
            "triggers": {
              "on_immutable_changes": "1c6615b335af0eb52959a57678801c56b10a11b2",
              "on_new_version": "v1.22.2"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "digitalocean_droplet.servers",
            "module.k3s.data.http.k3s_installer",
            "module.k3s.data.http.k3s_version",
            "module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_label",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_taint",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": []
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "random_password",
      "name": "k3s_cluster_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 48,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "JEUl63f3CpOoBO2NOEqEqOVYYP6P9vLTtRMpHOYt24qRATQt",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_cert_request",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBKDCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATNDkxB/BAYI7Ubzqzb\ngE6xFiPPs3HckLlgbO/eY2j1fxn/OTAAuTBBxNHIoi0G2BJuo8sn+jTuXNHl+Uq3\n5xebFln2V/8Tqr7FVYVJTzlYsnLtDHhQpLwPBev7ESLbjsagADAKBggqhkjOPQQD\nAwNpADBmAjEAq/uTncZpDbiVCEGdZvejfLt6OWNvEJtvK9MNMH7xmV0Mz+hmWcjs\nkZB1xA4t0+dmAjEA9nKNMwIpuB2MrkPpMBX/wmoErIfSM34jZfWBSaudBBUe/F/u\nsPvTNFO1qoVGIaB9\n-----END CERTIFICATE REQUEST-----\n",
            "dns_names": null,
            "id": "a32b03baaf0a7c5467c9b128a766d3f5d631b890",
            "ip_addresses": null,
            "key_algorithm": "ECDSA",
            "private_key_pem": "19877d97819c8c228055dd7c31f2c101c5d3e79a",
            "subject": [
              {
                "common_name": "master-user",
                "country": "",
                "locality": "",
                "organization": "system:masters",
                "organizational_unit": "",
                "postal_code": "",
                "province": "",
                "serial_number": "",
                "street_address": null
              }
            ],
            "uris": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.k3s.tls_private_key.master_user"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_locally_signed_cert",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "key_encipherment",
              "digital_signature",
              "client_auth"
            ],
            "ca_cert_pem": "3f5162b75114044e5c9d4a85dc8e2d5b71cb6d41",
            "ca_key_algorithm": "ECDSA",
            "ca_private_key_pem": "bd68a6b73ad460c6ff64f0f809492bb8c2ac6d68",
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB4DCCAWegAwIBAgIQP6OZmZNlYJ9KDondGnCUiDAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yMTA5MTgxODQwMjJaGA8y\nMTIxMDkxOTE4NDAyMlowLzEXMBUGA1UEChMOc3lzdGVtOm1hc3RlcnMxFDASBgNV\nBAMTC21hc3Rlci11c2VyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEzQ5MQfwQGCO1\nG86s24BOsRYjz7Nx3JC5YGzv3mNo9X8Z/zkwALkwQcTRyKItBtgSbqPLJ/o07lzR\n5flKt+cXmxZZ9lf/E6q+xVWFSU85WLJy7Qx4UKS8DwXr+xEi247Go1YwVDAOBgNV\nHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAf\nBgNVHSMEGDAWgBSxeDzS1KenlSesodjveIBp8ngF5DAKBggqhkjOPQQDAwNnADBk\nAjAFE/S1WMAH2GeCJY8CEtDKXEwZDJ1wGaHZn1wJbDzgGop29L+dwz8TpSsJHNWn\nX24CMGee742mVyLA7BmoWYq6Z4vsqefCwIdinpGnMnz/bkg1QvRbdQ+g6cHB9iC+\n5tJxiA==\n-----END CERTIFICATE-----\n",
            "cert_request_pem": "8dac665d7a403379fe5e15038e2450f834c048ee",
            "early_renewal_hours": 0,
            "id": "84590823498585954521478651487148086408",
            "is_ca_certificate": null,
            "ready_for_renewal": false,
            "set_subject_key_id": null,
            "validity_end_time": "2121-09-19T18:40:22.757906499Z",
            "validity_period_hours": 876600,
            "validity_start_time": "2021-09-18T18:40:22.757906499Z"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "ca_private_key_pem"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.k3s.tls_cert_request.master_user",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_private_key.master_user",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "kubernetes_ca",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "2416dbee18ec357e991bc72975a89fe8faa6adc0",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAWGTl685coaJO31JbJsXI/Rf28jce3+VJiBUL+yxvQ9skznzOUZkJ2\nMQuXDXjnLmWgBwYFK4EEACKhZANiAARDyx1Me8U12l3VEXT8cFHOF0HlVshLt8lX\nHoZs0ALVuSmZr8TPs63+JcIUq1dBlhyKj5ZiUQ/bgf0tMXSZAd5Cahsa+kvQXx6A\naJr3YNJrb9c6A0VpFijeie18p2FHcsU=\n-----END EC PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "11:56:53:c1:0a:bb:0f:43:0e:c0:e4:70:f9:26:8d:46",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBEPLHUx7xTXaXdURdPxwUc4XQeVWyEu3yVcehmzQAtW5KZmvxM+zrf4lwhSrV0GWHIqPlmJRD9uB/S0xdJkB3kJqGxr6S9BfHoBomvdg0mtv1zoDRWkWKN6J7XynYUdyxQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEQ8sdTHvFNdpd1RF0/HBRzhdB5VbIS7fJ\nVx6GbNAC1bkpma/Ez7Ot/iXCFKtXQZYcio+WYlEP24H9LTF0mQHeQmobGvpL0F8e\ngGia92DSa2/XOgNFaRYo3ontfKdhR3LF\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "8d652b2922a845491a8f88fc4cac9caa0b36b43a",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDip02yjcD+BGsYOwcOOIuxNUAOd4qajYWaaGRD80wOOnVMZiv25Dk9\n22Bef/a2BGWgBwYFK4EEACKhZANiAARVylLa9VMxaEwzDD93PQ8EvTYJxcYuh/Zi\nqFKhgnOfchvO6ZyWMxx3fkSrIXmgoyVaQbeN8e7gU74Nm6zpsHjo150OXdWwwtcw\nsmPnYTWvdOk+Oq8v70OpsIuy0jQF17g=\n-----END EC PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "75:f5:18:bb:c0:e9:62:6f:2b:ef:01:04:8c:69:e7:3a",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBFXKUtr1UzFoTDMMP3c9DwS9NgnFxi6H9mKoUqGCc59yG87pnJYzHHd+RKsheaCjJVpBt43x7uBTvg2brOmweOjXnQ5d1bDC1zCyY+dhNa906T46ry/vQ6mwi7LSNAXXuA==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEVcpS2vVTMWhMMww/dz0PBL02CcXGLof2\nYqhSoYJzn3IbzumcljMcd35EqyF5oKMlWkG3jfHu4FO+DZus6bB46NedDl3VsMLX\nMLJj52E1r3TpPjqvL+9DqbCLstI0Bde4\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "a94a87d0e13a85c0d667386c32df9c15b983517b",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDB5EpNzcoFgEo4ZmhfFGAM2+DjhsPdFyTZmyRqFHDxGbW99VGO3ezhq\ninbRGE9ETvygBwYFK4EEACKhZANiAARYnT/+by4V7/gyctd9IIC5t9BY5guXnA53\njSwRGbnz9eUY/8kYKBH0tlSJ/QDYRVN/x7TDtKDp3mnjglJYokkB3DclG0K7iVbZ\np+Mr5VI8ejRybD+06X+YE/4UPm4keec=\n-----END EC PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "04:a2:78:73:96:9c:eb:e2:e9:a9:aa:62:27:1b:e3:13",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBFidP/5vLhXv+DJy130ggLm30FjmC5ecDneNLBEZufP15Rj/yRgoEfS2VIn9ANhFU3/HtMO0oOneaeOCUliiSQHcNyUbQruJVtmn4yvlUjx6NHJsP7Tpf5gT/hQ+biR55w==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEWJ0//m8uFe/4MnLXfSCAubfQWOYLl5wO\nd40sERm58/XlGP/JGCgR9LZUif0A2EVTf8e0w7Sg6d5p44JSWKJJAdw3JRtCu4lW\n2afjK+VSPHo0cmw/tOl/mBP+FD5uJHnn\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "83ed9426b7eafebbc58bd5e19e137d7c612a60b2",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDCcYjPwvPXWkLwmFdZ6gmF2L+jA9GJAYwXOldB+dqke7iy+IfZ0SSzT\nJXkoxHwzmaWgBwYFK4EEACKhZANiAATNDkxB/BAYI7UbzqzbgE6xFiPPs3HckLlg\nbO/eY2j1fxn/OTAAuTBBxNHIoi0G2BJuo8sn+jTuXNHl+Uq35xebFln2V/8Tqr7F\nVYVJTzlYsnLtDHhQpLwPBev7ESLbjsY=\n-----END EC PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "c1:4d:8f:f3:d6:7c:21:00:59:fd:12:a8:f8:19:ed:2e",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBM0OTEH8EBgjtRvOrNuATrEWI8+zcdyQuWBs795jaPV/Gf85MAC5MEHE0ciiLQbYEm6jyyf6NO5c0eX5SrfnF5sWWfZX/xOqvsVVhUlPOViycu0MeFCkvA8F6/sRItuOxg==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEzQ5MQfwQGCO1G86s24BOsRYjz7Nx3JC5\nYGzv3mNo9X8Z/zkwALkwQcTRyKItBtgSbqPLJ/o07lzR5flKt+cXmxZZ9lf/E6q+\nxVWFSU85WLJy7Qx4UKS8DwXr+xEi247G\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_self_signed_cert",
      "name": "kubernetes_ca_certs",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": "0",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "critical",
              "digitalSignature",
              "keyEncipherment",
              "keyCertSign"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBrjCCATSgAwIBAgIRAN6CD+ajcqVbYIR6HjRHi04wCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2EwIBcNMjEwOTE4MTg0MDIyWhgP\nMjEyMTA5MTkxODQwMjJaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtY2xpZW50LWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEQ8sdTHvFNdpd1RF0/HBRzhdB5VbIS7fJ\nVx6GbNAC1bkpma/Ez7Ot/iXCFKtXQZYcio+WYlEP24H9LTF0mQHeQmobGvpL0F8e\ngGia92DSa2/XOgNFaRYo3ontfKdhR3LFozIwMDAPBgNVHRMBAf8EBTADAQH/MB0G\nA1UdDgQWBBSxeDzS1KenlSesodjveIBp8ngF5DAKBggqhkjOPQQDAwNoADBlAjEA\n4QgaUdC2eupHtoduTcejbKjymZa9I74Ozt70HzAY3Bj+eHtbbcZmXb58B87tH9o8\nAjBOGqX10lxRBKDljEt44p3ngeWM6fU+y/6ZaqMfzoBPHW7Ctmbpj0E1KC6oCvK7\nkYM=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "295763936165066939452601653750709848910",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "bd68a6b73ad460c6ff64f0f809492bb8c2ac6d68",
            "ready_for_renewal": false,
            "set_subject_key_id": null,
            "subject": [
              {
                "common_name": "kubernetes-client-ca",
                "country": "",
                "locality": "",
                "organization": "",
                "organizational_unit": "",
                "postal_code": "",
                "province": "",
                "serial_number": "",
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2121-09-19T18:40:22.626261763Z",
            "validity_period_hours": 876600,
            "validity_start_time": "2021-09-18T18:40:22.626261763Z"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.k3s.tls_private_key.kubernetes_ca"
          ]
        },
        {
          "index_key": "1",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "critical",
              "digitalSignature",
              "keyEncipherment",
              "keyCertSign"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBrzCCATSgAwIBAgIRAKGQv3Y/QJbnBugKj+ekPwowCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1zZXJ2ZXItY2EwIBcNMjEwOTE4MTg0MDIyWhgP\nMjEyMTA5MTkxODQwMjJaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtc2VydmVyLWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEVcpS2vVTMWhMMww/dz0PBL02CcXGLof2\nYqhSoYJzn3IbzumcljMcd35EqyF5oKMlWkG3jfHu4FO+DZus6bB46NedDl3VsMLX\nMLJj52E1r3TpPjqvL+9DqbCLstI0Bde4ozIwMDAPBgNVHRMBAf8EBTADAQH/MB0G\nA1UdDgQWBBT0aVC6fWSgkd67+GV8+YJJK0cBujAKBggqhkjOPQQDAwNpADBmAjEA\nyxlQ7XJb1kU/xcBhFsOQZ53/Dyl3YpBg8RTRjv+/6rw/f/gqs7utYGOGY0FvWTd/\nAjEA2IBH4hKGJP8v6GLacBOzgAsHSUFNEpxt2Rj3R5vgEU+LpyF/LVZU60KEhOqM\n6xG8\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "214757281377733584356132184582263160586",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "0235875a818464e3aebbf54f4ed934cc5472aff7",
            "ready_for_renewal": false,
            "set_subject_key_id": null,
            "subject": [
              {
                "common_name": "kubernetes-server-ca",
                "country": "",
                "locality": "",
                "organization": "",
                "organizational_unit": "",
                "postal_code": "",
                "province": "",
                "serial_number": "",
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2121-09-19T18:40:22.655097381Z",
            "validity_period_hours": 876600,
            "validity_start_time": "2021-09-18T18:40:22.655097381Z"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.k3s.tls_private_key.kubernetes_ca"
          ]
        },
        {
          "index_key": "2",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "critical",
              "digitalSignature",
              "keyEncipherment",
              "keyCertSign"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBxTCCAUugAwIBAgIQHrJj3G6W5v86oGaNRyMKdDAKBggqhkjOPQQDAzArMSkw\nJwYDVQQDEyBrdWJlcm5ldGVzLXJlcXVlc3QtaGVhZGVyLWtleS1jYTAgFw0yMTA5\nMTgxODQwMjJaGA8yMTIxMDkxOTE4NDAyMlowKzEpMCcGA1UEAxMga3ViZXJuZXRl\ncy1yZXF1ZXN0LWhlYWRlci1rZXktY2EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARY\nnT/+by4V7/gyctd9IIC5t9BY5guXnA53jSwRGbnz9eUY/8kYKBH0tlSJ/QDYRVN/\nx7TDtKDp3mnjglJYokkB3DclG0K7iVbZp+Mr5VI8ejRybD+06X+YE/4UPm4keeej\nMjAwMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFM/X/L2bqE+XYTqMu8HG7hsL\nVU5xMAoGCCqGSM49BAMDA2gAMGUCMDZnE07KBrd4DIp/YPq3fzndoFrWZeTDC5D1\n1ZZ9S3kYOrshGdgjxbjNEmTbVwNm1QIxALNPEtzlfwAiKqttth41Qd0QbybDCYHc\nzDKH/9CRTyal5yT9lvUxjVPbCzNJ6Jeghw==\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "40803094137338970964244321470267984500",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "b36b116ba473206d034cab8aba53607cc712ea2b",
            "ready_for_renewal": false,
            "set_subject_key_id": null,
            "subject": [
              {
                "common_name": "kubernetes-request-header-key-ca",
                "country": "",
                "locality": "",
                "organization": "",
                "organizational_unit": "",
                "postal_code": "",
                "province": "",
                "serial_number": "",
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2121-09-19T18:40:22.640136147Z",
            "validity_period_hours": 876600,
            "validity_start_time": "2021-09-18T18:40:22.640136147Z"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "module.k3s.tls_private_key.kubernetes_ca"
          ]
        }
      ]
    }
  ]
}
